start: program

program: statement+

statement: expr -> expr
    | assign
    | conditional
    | while_loop
    | increment
    | "logsymtab" -> logsymtab
    | "log""(" expr ")" -> log
    | "return" expr -> return_stmt

expr: call
    | expr "%" term -> mod
    | expr "+" term -> add
    | expr "-" term -> sub
    | expr "==" expr -> eq
    | expr "!=" expr -> neq
    | expr "<" expr -> lt
    | expr ">" expr -> gt
    | expr "<=" expr -> leq
    | expr ">=" expr -> geq
    | expr "&&" expr -> land
    | expr "||" expr -> lor
    | "!" expr -> lnot
    | "()" "=>" block -> lam
    | "(" IDENTIFIER ")" "=>" block -> lam
    | "(" IDENTIFIER ("," IDENTIFIER)+ ")" "=>" block -> lam
    | ESCAPED_STRING -> string
    | term
    | KEYWORD_TRUE -> true
    | KEYWORD_FALSE -> false

term: term "*" factor -> mul
    | term "/" factor -> div
    | factor

factor: NUMBER -> num
    | "(" expr ")"
    | "-" factor -> neg
    | var

var : IDENTIFIER

assign: IDENTIFIER "=" expr -> assign

COMMENT: /\/\/[^\n]*/

KEYWORD_TRUE: "true"
KEYWORD_FALSE: "false"

block: "{" statement* "}"

conditional: "if" "(" expr ")" block ("elseif" "(" expr ")" block)* ("else" block)?

while_loop: "while" "(" expr ")" block

increment: IDENTIFIER "++"

call: expr "()"
    |  expr "(" expr ")"
    |  expr "(" expr ("," expr)+ ")"

IDENTIFIER: LETTER (LETTER | DIGIT)*

%import common.NUMBER
%import common.LETTER
%import common.DIGIT
%import common.WS
%import common.ESCAPED_STRING
%ignore WS
%ignore COMMENT